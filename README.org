* Advent of Code 2019

My first time doing the Advent of Code problems. I'm currently
teaching myself Haskell, so this is a good opportunity to get some
practice with the language.

Run all solutions with =make=:
#+BEGIN_SRC bash
$ make
runhaskell day1.hs < day1.input
Part One: 3455717
Part Two: 5180690
runhaskell day2.hs < day2.input
Part One: 3224742
Part Two: 7960
[...]
#+END_SRC

** Commentary
*** Day 1
Very straightforward. Calculating the fuel in the second part put good
use of the =iterate= function.

#+BEGIN_SRC haskell
fuel' :: Int -> Int
fuel' m = sum $ takeWhile (>0) (iterate f (f m))
  where f x = x `div` 3 - 2
#+END_SRC

*** Day 2
Like in Day 1, this solution also used =iterate= in order to continue
executing the machine until the halting opcode was found.

I represented a program as list of integers:
#+BEGIN_SRC haskell
type Prog = [Int]
#+END_SRC
But using a list for something that can be mutated by index isn't very
nice, and it indeed makes the =exec= function look pretty bad. But for
this simple problem it was good enough.
#+BEGIN_SRC haskell
exec :: State -> State
exec (n, p) = case p !! n of
    1 -> (n + 4, mut p c (p !! a + p !! b))
    2 -> (n + 4, mut p c (p !! a * p !! b))
    _ -> error "Invalid opcode"
    where a = p !! (n + 1)
          b = p !! (n + 2)
          c = p !! (n + 3)
#+END_SRC

*** Day 3
This one required a bit more thought, and I failed in my first
attempt. I transformed a collection of movements of a wire into a grid
where occupied squares were marked. I used a list of positions to mark
the squares. This solution seemed to work, but when applied to the
real puzzle input I realized the solution wasn't performing well. In
fact, the generated grids produced _very_ long lists and the program
wouldn't finish in time for me to be satisfied. Using a list for the
grid wasn't probably the best either, but I knew there must be a
better solution. A good lesson for next time is to first look more
closely at the puzzle input to get a feel for the complexity of the
problem.

My second attempt instead folded the list of movements into a list of
line segments instead. These segments could then be paired up in order
look for intersections between them in order to find the list of
crossings. This turned up a lot more efficient and solved the problem.

I used two value constructors for the =Segments= type: =Horiz= and
=Vert=. I chose this to simplify the code for the intersection
predicate, but I'm not sure it got simpler than a more general segment
type. I had to enumerate the cases in pattern matches in several
places in the solution.

Finally, I think it was neat that I could make =Movement= an instance
of the =Read= class. Then I could parse the provided comma separated
input by adding square brackets and calling =read= on it.
#+BEGIN_SRC haskell
main = do
    x <- getLine
    let xs = read $ "[" ++ x ++ "]"
#+END_SRC

*** Day 4
This problem needed a range of numbers passed through a couple of
filters. Haskell's point free notation makes this quite expressive.

#+BEGIN_SRC haskell
solve' :: Int -> Int -> Int
solve' lo hi = length . filter (any (== 2) . digitCounts) . filter increasing .
               map show $ [lo..hi]
#+END_SRC

*** Day 5
This one was trickier due to the fact that the new opcodes were
handling input/output. Handling IO in a pure functional language as
Haskell requires me to use a Monad. I am not very used to these so it
wasn't immediately obvious to me how I would handle it in my existing
implementation. After thinking for a while I figured that I could stop
using =iterate= and make =exec= recursive with the signature =State ->
IO ()= instead. That way I could feed the IO actions through the
recursive calls.

Here's how the first four instructions were implemented
#+BEGIN_SRC haskell
exec :: State -> IO ()
exec s@(n, p) = case decode s of
    Add p1 p2 (Param Pos t) -> return () >>
                               exec (n + 4, mut p t (eval p p1 + eval p p2))
    Mul p1 p2 (Param Pos t) -> return () >>
                               exec (n + 4, mut p t (eval p p1 * eval p p2))
    Inp (Param Pos t)       -> getLine >>=
                               \x -> exec (n + 2, mut p t (read x))
    Out p1                  -> putStrLn (show (eval p p1)) >>
                               exec (n + 2, p)
#+END_SRC

Implementing the parameter modes were pretty straightforward and I
added a few types to help me represent them.
#+BEGIN_SRC haskell
data Mode = Pos | Imm
    deriving Show
data Param = Param Mode Int
    deriving Show
data Instr = Add Param Param Param
           | Mul Param Param Param
           | Inp Param
           | Out Param
#+END_SRC

Perhaps I really didn't need the IO monad after all, as I guess I
could have sent the predefined input through another argument, and
instead return the output instead of sending it to stdout. But this
was educational, so I kept it like this.

*** Day 6
Solution obtained by appropriately querying the lookup table provided
as input. Performance is not great as it repeatedly does lookups in a
list, but this is just a question of using a =Map= instead.

*** Day 7
This one was so much harder than the other ones due to the pure
functional nature of Haskell. Here I needed to run the machine in
cascade, feeding output from one amplifier as input into the next, in
a feedback loop. So I needed to keep the execution state of all
amplifiers simultaneously. To be able to run in lock-step, and feed
input/output on demand, I changed the signature of =exec= yet again.
#+BEGIN_SRC haskell
exec :: State -> (StopReason, State)
#+END_SRC

Whenever I needed to interrupt the execution, I'd stop recursively
executing =exec= and return the tuple with a reason for stopping,
which could for instance be =Output=. Then, I'd store that value and
feed it into the next amplifier.

This worked pretty good actually and solve the problem, but the
implementation of the cascading wasn't too beautiful.

#+BEGIN_SRC haskell
runCascade :: Prog -> [Int] -> Int
runCascade p phases = f amps 0
    where amps = [setupAmp p phase | phase <- phases]
          f (amp:rest) nextInp = case exec amp of
                (Halt, _)      -> nextInp
                (Input, amp')  -> f (amp' { input=Just nextInp } : rest) nextInp
                (Output, amp') -> f (rest ++ [amp']) (getOutput amp')
#+END_SRC

I needed to keep the state around and pass it back into =exec= every
time. Perhaps that can be made more streamlined with help of the State
Monad, but I've never used it nor do I know how to use it. Hopefully
I'll learn it soon enough.
